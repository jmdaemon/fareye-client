plugins {
    //id 'java'
    id 'checkstyle'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Unit Testing

    // Test Framework
    testImplementation (platform('org.junit:junit-bom:5.7.0'))
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.7.0"

    // Mocking
    testImplementation("org.mock-server:mockserver-netty:5.11.2")

    // Logging
    implementation 'org.unix4j:unix4j-command:0.5'

    // Graphics

    // Icons
    implementation platform('org.kordamp.ikonli:ikonli-bom:12.1.0')
    implementation 'org.kordamp.ikonli:ikonli-core'
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.0.0'
    implementation 'org.kordamp.ikonli:ikonli-boxicons-pack:12.0.0'

    // My Custom Dependencies
    //implementation 'io.github.jmdaemon:toolbox:0.1.2'
    //implementation 'io.github.jmdaemon:crypt:0.1.0'
    //implementation 'io.github.jmdaemon.crypt:crypt:0.1.0'
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    modularity.inferModulePath = true
}

//tasks.register("compile") {
    ////dependsOn gradle.includedBuild('toolbox').task(':toolbox:build')
    ////dependsOn gradle.includedBuild('crypt').task(':crypt:build')

    //dependsOn gradle.includedBuild('../toolbox').task(':toolbox:build')
    //dependsOn gradle.includedBuild('../crypt').task(':crypt:build')
//}


javafx {
    version = "17.0.1"
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls' , 'javafx.fxml' ]
}

def AppEntryPoint = 'app.ui.javafx.App'

application {
//mainClassName = AppEntryPoint
    mainClass = AppEntryPoint
}

shadowJar {
    // https://stackoverflow.com/questions/32887966/shadow-plugin-gradle-what-does-mergeservicefiles-do
    mergeServiceFiles()
}

group = 'io.github.jmdaemon'
version = '0.1.5'

// Set custom source sets to compile certain files in certain directories only
ext {
    src = "src/main/java"
    org = group
    test = "src/test/java"
    //resources = "src/main/java/interface/resources"
    resources = "${ext.src}/interface/resources"
}

sourceSets.all { 
    ext.src = src
    ext.test = test
    ext.resources = resources
}

checkstyle { 
    toolVersion = "10.0"
    configFile file("config/checkstyle/sun_checks.xml") 
    // Disable checkstyle checks for now
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false
}

sourceSets { 
    main {
        resources { 
            //srcDirs = [ "$src/interface/javafx" ]
            //srcDirs = [ "$src/interface" ]
            srcDirs = [ "$src/ui" ]
            includes = [ "**/*.fxml" , "**/*.css" , "**/*.properties"]
        }
        java {
            //srcDirs = [ "$src/bankaccount", "$src/money", "$src/encryption"]
            //srcDirs = [ "$src/bankaccount", "$src/money"]
            //srcDirs = [ "$src/connect/" ]
            //srcDirs = [ "$src/interface/" ]
            //srcDirs = [ "$src/bankaccount", "$src/money", "$src/interface" ]
            //srcDirs = [ "$src/fareye", "$src/money", "$src/ui/javafx" ]
            //srcDirs = [ "$src/ui/javafx" ]
            srcDirs = [ "$src/ui" ]
            //srcDirs = [ "$src/security" ]
            //srcDirs = [ "$src/security", "$src/connect/"]
         }

    }

    test {
        java {
            //srcDirs = [ "$test/bankaccount", "$test/money", "$test/encryption"]
            //srcDirs = [ "$test/bankaccount", "$test/money"]
            //srcDirs = [ "$test/connect/" ]
            //srcDirs = [ "$test/bankaccount", "$test/money", "$test/interface" ]
            //srcDirs = [ "$src/fareye", "$test/money", "$test/ui/javafx" ]
            //srcDirs = [ "$test/ui/javafx" ]
            srcDirs = [ "$test/ui" ]
            //srcDirs = [ "$test/security" ]
            //srcDirs = [ "$test/security", "$test/connect/"]
        }
    }
}
