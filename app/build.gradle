plugins {
    //id 'java-library'
    id 'application'
    //id 'java'
    //id 'java-library'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'checkstyle'
    //id 'eclipse'    // [Optional] Generates Eclipse project files
    //id 'idea'       // [Optional] Generate IntelliJ IDEA project files
}

//group = 'io.github.jmdaemon'
//version = '0.1.0'

//def AppEntryPoint = 'ui.jfx.App'

repositories {
    mavenCentral()
    //google()
    flatDir {
        dirs 'libs' // Add jars in app/libs
    }
}

//def src = "app/src/main/java"
//def test = "app/src/test/java"
//def resources = "app/src/main/resources"
//sourceSets.all { 
    //ext.src = "app/src/main/java"
    //ext.test = "app/src/test/java"
    //ext.resources = "app/src/main/resources"
//}

//ext {
    //src = "app/src/main/java"
    //org = 'io/github/jmdaemon'
    //test = "app/src/test/java"
    //resources = "app/src/main/resources"
//}



//ext {
    //src = "app/src/main/java"
    //org = 'io/github/jmdaemon'
    //test = "app/src/test/java"
    //resources = "app/src/main/resources"
//}

//sourceSets.all { 
    //ext.src = src
    //ext.test = test
    //ext.resources = resources
//}

dependencies {
    // Unit Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    //testImplementation('org.junit.jupiter:junit-jupiter:5.9.0')
    //testImplementation(platform('org.junit:junit-bom:5.9.0'))
    //testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')


    // Http Mocking Library
    testImplementation("org.mock-server:mockserver-netty:5.11.2")

    // Logging Library
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'ch.qos.logback:logback-core:1.2.6'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.codehaus.janino:janino:3.1.8' // Adds conditional directives to logback.xml

    // Icons
    //implementation platform('org.kordamp.ikonli:ikonli-bom:12.1.0')
    //implementation 'org.kordamp.ikonli:ikonli-core'
    //implementation 'org.kordamp.ikonli:ikonli-javafx'
    //implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.0.0'
    //implementation 'org.kordamp.ikonli:ikonli-boxicons-pack:12.0.0'

    // Misc
    //implementation 'com.google.guava:guava:31.1-jre'
    implementation 'io.github.jmdaemon:toolbox:0.1.2'
    implementation 'io.github.jmdaemon:crypt:0.1.0'


    //testRuntime("org.junit.jupiter:junit-jupiter-api:5.8.1")
    //testRuntime("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    //testRuntime("org.junit.jupiter:junit-jupiter-params:5.8.1")
    //testRuntime("org.junit.platform:junit-platform-suite:1.8.1")

    //testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    //testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    //testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.1")
    //testImplementation("org.junit.platform:junit-platform-suite:1.8.1")

    //implementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    //implementation("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    //implementation("org.junit.jupiter:junit-jupiter-params:5.8.1")
    //implementation("org.junit.platform:junit-platform-suite:1.8.1")


}

group = 'io.github.jmdaemon'
version = '0.1.0'

application {
    //mainClass = AppEntryPoint
//def AppEntryPoint = 'ui.jfx.App'
    //mainClass = 'ui.jfx.App'
    mainClass = 'fareye.Account'
}

//testing {
    //suites {
        //// Configure the built-in test suite
        //test {
            //// Use JUnit 5 Jupiter test framework
            ////useJUnitJupiter('5.8.1')
            //useJUnitJupiter('5.9.0')
            ////useJUnitPlatform()
        //}
    //}
//} 

tasks.named('test') {
    useJUnitPlatform() 
    maxHeapSize = '1G'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Create JavaFX components jar for Scenebuilder
task jfxcompjar(type: Jar) {
    archivesBaseName = "widgetsfx"
    archiveVersion = "0.1.0"

    from(sourceSets.main.output) {  
        includes = [ "ui/jfx/components/**", "ui/jfx/Global.java", "logback.xml", "**/*.css", "**/*.png", "**/*.jpg", "**/*.fxml" , "**/*.css" , "**/*.properties"]
    }
}

//test {
    //useJUnitPlatform()
    //maxHeapSize = '1G'
    //testLogging {
        //events "passed", "skipped", "failed"
    //}
    ////testClassesDirs = sourceSets.test.output
    ////classpath = sourceSets.test.runtimeClasspath

    ////testLogging {
        //////events "failed"
        ////events "passed", "skipped", "failed"
        ////exceptionFormat "full"
        ////showStandardStreams = true
    ////}
    ////include 'fareye/**'
//}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
    //modularity.inferModulePath = true
    //modularity.inferModulePath = false
}

javafx {
    //version = "17.0.1"
    version = "18.0.1"
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls' , 'javafx.fxml' ]
}

checkstyle {
    toolVersion = "10.0"
    configFile file("config/checkstyle/sun_checks.xml") 
    // Disable checkstyle checks for now
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false
}

sourceSets {
    main {
        java {
            //srcDirs "src"
            //srcDirs = [ "src/main/java/fareye", "src/main/java/ui" ]
            //srcDirs = [ "src/main/java/fareye", "src/main/java/ui" ]
            //srcDirs "src"
            //exclude "interface-old"
            //exclude "src/main/java/interface-old"
            //srcDirs "src/main/java"

            //srcDirs = [ "src/main/java/fareye", "src/main/java/ui/jfx" ]
            //srcDirs "src"
            //srcDirs = ["$src/fareye"]
            exclude "interface-old"
        }
        resources {
            includes = [ "**/*.png", "**/*.jpg", "logback.xml", "**/*.fxml" , "**/*.css" , "**/*.properties"]
            exclude "interface-old"
        }

    }

    //test {
        //java {
            //srcDirs = ["$test/fareye"]
            ////srcDir 'src/test/java/fareye'
        //}
    //}
    //test {
        //java {
            //srcDirs = [ "test" ]
            //srcDirs "test"
            //srcDirs "src/test/java"
            //srcDirs = [ "src/main/java/fareye", "src/main/java/ui/jfx", "src/test/java/fareye" ]

            //srcDirs = [ "src/test/java/fareye" ]
        //}
    //}

        //sourceSets.test.java.srcDirs = ['tst']
            //compileClasspath += sourceSets.main.output
            //runtimeClasspath += sourceSets.main.output
            //srcDirs('src/test/java')
            //srcDirs = [ 'src/test/java' ]
            //srcDirs = [ 'src/test/java/fareye' ]
            //srcDirs ["./src/test/java/**/*.java"]
            //srcDirs ["**/*.java"]
            //srcDirs ["src/test/java/fareye"]
            //srcDirs [ "app/src/test/java/fareye" ]
            //srcDirs [ "app/src/test/java/fareye" ]
}

// Tasks for debugging builds
task printSourceSetInformation() {

    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each { 
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}

task showprops() {
    doLast {
        //println commandLineProjectProp
        //println gradlePropertiesProp
        //println systemProjectProp
        def logging = System.properties['logging']
        if (logging) {
            println "Logging: Enabled"
        } else {
            println "Logging: Disabled"
        }

        def color = System.properties['color']
        if (color) {
            println "Colored logging: Enabled"
        } else {
            println "Colored logging: Disabled"
        }
    }
}
