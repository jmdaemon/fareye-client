plugins {
	id 'java' 
        id 'java-library' 
        id 'checkstyle'
        id "com.scuilion.syntastic" version "0.3.8"
        id 'org.openjfx.javafxplugin' version '0.0.9'
        //id 'org.springframework.boot' version '2.4.1'
        id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
	mavenCentral()
        jcenter()
}

dependencies {
	testImplementation (platform('org.junit:junit-bom:5.7.0'))
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.7.0"
        compile 'org.unix4j:unix4j-command:0.5'

        implementation platform('org.kordamp.ikonli:ikonli-bom:12.1.0')
        implementation 'org.kordamp.ikonli:ikonli-core'
        implementation 'org.kordamp.ikonli:ikonli-javafx'
        implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.0.0'
        implementation 'org.kordamp.ikonli:ikonli-boxicons-pack:12.0.0'

        testImplementation("org.mock-server:mockserver-netty:5.11.2")
        
        compile group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1' 
        compile group: 'com.airhacks', name:'afterburner.fx', version: '1.7.0'
}

test {
	useJUnitPlatform()
        maxHeapSize = '1G'
        testLogging {
		events "failed"
		exceptionFormat "full"
                showStandardStreams = true }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
    modularity.inferModulePath = true
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls' , 'javafx.fxml' ]
}

//mainClassName = 'ui.UI'
jar {
    manifest {
        attributes 'Main-Class': 'app.ui.Launcher'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {
    mergeServiceFiles()
}

//springBoot {
    //mainClassName = 'app.security'
//}

ext {
    src = "src/main/java"
    org = 'com/github/jmd' 
    test = "src/test/java"
    resources = "src/main/java/interface/resources"
}

sourceSets.all { 
ext.src = src
ext.test = test
ext.resources = resources
}

checkstyle { 
    configFile file("checkstyle/sun_checks.xml") 
    // Ignore checks for style
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false
}

sourceSets { 
    main {
        resources { 
            srcDirs = [ "$src/interface/" ]
            includes = [ "**/*.fxml" , "**/*.css" , "**/*.properties"]
        }
         java {
            //srcDirs = [ "$src/bankaccount", "$src/money", "$src/encryption"]
            //srcDirs = [ "$src/bankaccount", "$src/money"]
            //srcDirs = [ "$src/connect/" ]
            //srcDirs = [ "$src/interface/" ]
            srcDirs = [ "$src/bankaccount", "$src/money", "$src/interface/" ]
            //srcDirs = [ "$src/security" ]
            //srcDirs = [ "$src/security", "$src/connect/"]
         }

    }

    test {
        java {
            //srcDirs = [ "$test/bankaccount", "$test/money", "$test/encryption"]
            //srcDirs = [ "$test/bankaccount", "$test/money"]
            //srcDirs = [ "$test/connect/" ]
            srcDirs = [ "$test/bankaccount", "$test/money", "$test/interface/" ]
            //srcDirs = [ "$test/security" ]
            //srcDirs = [ "$test/security", "$test/connect/"]
        }
    }
}
